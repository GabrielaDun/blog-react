{"ast":null,"code":"import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\nvar noop = function noop() {};\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nexport var getRefTarget = function getRefTarget(ref) {\n  return ref && ('current' in ref ? ref.current : ref);\n};\n\n/**\n * The `useClickOutside` hook registers your callback on the document that fires\n * when a pointer event is registered outside of the provided ref or element.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onClickOutside\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\nfunction useClickOutside(ref) {\n  var onClickOutside = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    disabled = _ref.disabled,\n    _ref$clickTrigger = _ref.clickTrigger,\n    clickTrigger = _ref$clickTrigger === void 0 ? 'click' : _ref$clickTrigger;\n  var preventMouseClickOutsideRef = useRef(false);\n  var handleMouseCapture = useCallback(function (e) {\n    var currentTarget = getRefTarget(ref);\n    warning(!!currentTarget, 'ClickOutside captured a close event but does not have a ref to compare it to. ' + 'useClickOutside(), should be passed a ref that resolves to a DOM node');\n    preventMouseClickOutsideRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\n  }, [ref]);\n  var handleMouse = useEventCallback(function (e) {\n    if (!preventMouseClickOutsideRef.current) {\n      onClickOutside(e);\n    }\n  });\n  useEffect(function () {\n    if (disabled || ref == null) return undefined;\n    var doc = ownerDocument(getRefTarget(ref)); // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    var currentEvent = (doc.defaultView || window).event; // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    var removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\n    var removeMouseListener = listen(doc, clickTrigger, function (e) {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n      handleMouse(e);\n    });\n    var mobileSafariHackListeners = [];\n    if ('ontouchstart' in doc.documentElement) {\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(function (el) {\n        return listen(el, 'mousemove', noop);\n      });\n    }\n    return function () {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      mobileSafariHackListeners.forEach(function (remove) {\n        return remove();\n      });\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse]);\n}\nexport default useClickOutside;","map":{"version":3,"names":["contains","listen","ownerDocument","useCallback","useEffect","useRef","useEventCallback","warning","noop","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","getRefTarget","ref","current","useClickOutside","onClickOutside","arguments","length","undefined","_ref","disabled","_ref$clickTrigger","clickTrigger","preventMouseClickOutsideRef","handleMouseCapture","e","currentTarget","target","handleMouse","doc","currentEvent","defaultView","window","removeMouseCaptureListener","removeMouseListener","mobileSafariHackListeners","documentElement","slice","call","body","children","map","el","forEach","remove"],"sources":["/Users/gabriela/blog-react/blog-react/node_modules/@restart/ui/esm/useClickOutside.js"],"sourcesContent":["import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\n\nconst noop = () => {};\n\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport const getRefTarget = ref => ref && ('current' in ref ? ref.current : ref);\n\n/**\n * The `useClickOutside` hook registers your callback on the document that fires\n * when a pointer event is registered outside of the provided ref or element.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onClickOutside\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\nfunction useClickOutside(ref, onClickOutside = noop, {\n  disabled,\n  clickTrigger = 'click'\n} = {}) {\n  const preventMouseClickOutsideRef = useRef(false);\n  const handleMouseCapture = useCallback(e => {\n    const currentTarget = getRefTarget(ref);\n    warning(!!currentTarget, 'ClickOutside captured a close event but does not have a ref to compare it to. ' + 'useClickOutside(), should be passed a ref that resolves to a DOM node');\n    preventMouseClickOutsideRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\n  }, [ref]);\n  const handleMouse = useEventCallback(e => {\n    if (!preventMouseClickOutsideRef.current) {\n      onClickOutside(e);\n    }\n  });\n  useEffect(() => {\n    if (disabled || ref == null) return undefined;\n    const doc = ownerDocument(getRefTarget(ref)); // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    let currentEvent = (doc.defaultView || window).event; // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    const removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\n    const removeMouseListener = listen(doc, clickTrigger, e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      handleMouse(e);\n    });\n    let mobileSafariHackListeners = [];\n\n    if ('ontouchstart' in doc.documentElement) {\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(el => listen(el, 'mousemove', noop));\n    }\n\n    return () => {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      mobileSafariHackListeners.forEach(remove => remove());\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse]);\n}\n\nexport default useClickOutside;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}